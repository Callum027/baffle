###
# Helper definitions for the main language constructs.
###


name = r"[A-Za-z][A-Za-z0-9-_]*" # TODO: allow non-alphanumerical names
unique_name = name

attr_name = "ipv4_subnet" | "ipv6_subnet" | ...
attr_value = ipv4_subnet | ipv6_subnet | ...

protocol = (("tcp"|"udp"), port_num) |
           ("arp") |
           ...

group_stmt = "{", unique_name [{",", unique_name}] "}"


###
# Main language constructs.
###


statement = alias | entity | service | policy


alias = "alias", unique_name, attr_name, attr_value


entity = "entity", 
                   ("group", unique_name, group_stmt) |
                   (unique_name, 
                                 (attr_name, attr_value) | # START old "entity_attr"
                                 ("service", unique_name) # "service" is not strictly required here,
                   )                                      # but for other entity attributes, the type is
                                                          # defined, so this is for consistency's sake.

                                                          
# TODO: discuss about "or" in this. Probably useless and can be removed.
service = "service",
                     ("group", unique_name, group_stmt) |
                     (unique_name, protocol, {("and"|"or"), protocol})


# N.B. A lot of information can be inferred from this in the code
# subject ~= source
# object ~= destination
# For example, whether it's a source address/port we're supposed to be looking at
# in the policy.
policy = "policy",
                   ("group", unique_name, group_stmt) |
                   (unique_name, policy_action)
                   
policy_action = ("allow",  subject, object, app) |
                ("deny",   subject, object, app) |
                ("mirror", subject, object, app, mirror_dest) |
                ("mirror_rewrite", ...) | # TODO: talk with Ian
                ...

subject/object = (
                     unique_name | # alias/entity/group (alias or entity)
                     (attr_name, attr_value)
                 ), [("and"|"or"), subject/object]

app = (
          unique_name | # service/service group
          protocol
      ), [("and"|"or"), app]